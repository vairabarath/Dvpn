// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: super_node.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SuperNodeService_RegisterClientPeer_FullMethodName   = "/dvpn.SuperNodeService/RegisterClientPeer"
	SuperNodeService_PeerSessionHeartbeat_FullMethodName = "/dvpn.SuperNodeService/PeerSessionHeartbeat"
	SuperNodeService_RequestExitPeer_FullMethodName      = "/dvpn.SuperNodeService/RequestExitPeer"
	SuperNodeService_RequestExit_FullMethodName          = "/dvpn.SuperNodeService/RequestExit"
)

// SuperNodeServiceClient is the client API for SuperNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SuperNodeServiceClient interface {
	RegisterClientPeer(ctx context.Context, in *PeerRegistrationRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	PeerSessionHeartbeat(ctx context.Context, in *PeerSessionHeartbeatRequest, opts ...grpc.CallOption) (*Ack, error)
	RequestExitPeer(ctx context.Context, in *ExitPeerRequest, opts ...grpc.CallOption) (*ExitPeerResponse, error)
	RequestExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*WireguardConfig, error)
}

type superNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSuperNodeServiceClient(cc grpc.ClientConnInterface) SuperNodeServiceClient {
	return &superNodeServiceClient{cc}
}

func (c *superNodeServiceClient) RegisterClientPeer(ctx context.Context, in *PeerRegistrationRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SuperNodeService_RegisterClientPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superNodeServiceClient) PeerSessionHeartbeat(ctx context.Context, in *PeerSessionHeartbeatRequest, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, SuperNodeService_PeerSessionHeartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superNodeServiceClient) RequestExitPeer(ctx context.Context, in *ExitPeerRequest, opts ...grpc.CallOption) (*ExitPeerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExitPeerResponse)
	err := c.cc.Invoke(ctx, SuperNodeService_RequestExitPeer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *superNodeServiceClient) RequestExit(ctx context.Context, in *ExitRequest, opts ...grpc.CallOption) (*WireguardConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WireguardConfig)
	err := c.cc.Invoke(ctx, SuperNodeService_RequestExit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SuperNodeServiceServer is the server API for SuperNodeService service.
// All implementations must embed UnimplementedSuperNodeServiceServer
// for forward compatibility.
type SuperNodeServiceServer interface {
	RegisterClientPeer(context.Context, *PeerRegistrationRequest) (*RegisterResponse, error)
	PeerSessionHeartbeat(context.Context, *PeerSessionHeartbeatRequest) (*Ack, error)
	RequestExitPeer(context.Context, *ExitPeerRequest) (*ExitPeerResponse, error)
	RequestExit(context.Context, *ExitRequest) (*WireguardConfig, error)
	mustEmbedUnimplementedSuperNodeServiceServer()
}

// UnimplementedSuperNodeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSuperNodeServiceServer struct{}

func (UnimplementedSuperNodeServiceServer) RegisterClientPeer(context.Context, *PeerRegistrationRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClientPeer not implemented")
}
func (UnimplementedSuperNodeServiceServer) PeerSessionHeartbeat(context.Context, *PeerSessionHeartbeatRequest) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeerSessionHeartbeat not implemented")
}
func (UnimplementedSuperNodeServiceServer) RequestExitPeer(context.Context, *ExitPeerRequest) (*ExitPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExitPeer not implemented")
}
func (UnimplementedSuperNodeServiceServer) RequestExit(context.Context, *ExitRequest) (*WireguardConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestExit not implemented")
}
func (UnimplementedSuperNodeServiceServer) mustEmbedUnimplementedSuperNodeServiceServer() {}
func (UnimplementedSuperNodeServiceServer) testEmbeddedByValue()                          {}

// UnsafeSuperNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SuperNodeServiceServer will
// result in compilation errors.
type UnsafeSuperNodeServiceServer interface {
	mustEmbedUnimplementedSuperNodeServiceServer()
}

func RegisterSuperNodeServiceServer(s grpc.ServiceRegistrar, srv SuperNodeServiceServer) {
	// If the following call pancis, it indicates UnimplementedSuperNodeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SuperNodeService_ServiceDesc, srv)
}

func _SuperNodeService_RegisterClientPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperNodeServiceServer).RegisterClientPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperNodeService_RegisterClientPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperNodeServiceServer).RegisterClientPeer(ctx, req.(*PeerRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperNodeService_PeerSessionHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeerSessionHeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperNodeServiceServer).PeerSessionHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperNodeService_PeerSessionHeartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperNodeServiceServer).PeerSessionHeartbeat(ctx, req.(*PeerSessionHeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperNodeService_RequestExitPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperNodeServiceServer).RequestExitPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperNodeService_RequestExitPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperNodeServiceServer).RequestExitPeer(ctx, req.(*ExitPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SuperNodeService_RequestExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SuperNodeServiceServer).RequestExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SuperNodeService_RequestExit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SuperNodeServiceServer).RequestExit(ctx, req.(*ExitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SuperNodeService_ServiceDesc is the grpc.ServiceDesc for SuperNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SuperNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dvpn.SuperNodeService",
	HandlerType: (*SuperNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClientPeer",
			Handler:    _SuperNodeService_RegisterClientPeer_Handler,
		},
		{
			MethodName: "PeerSessionHeartbeat",
			Handler:    _SuperNodeService_PeerSessionHeartbeat_Handler,
		},
		{
			MethodName: "RequestExitPeer",
			Handler:    _SuperNodeService_RequestExitPeer_Handler,
		},
		{
			MethodName: "RequestExit",
			Handler:    _SuperNodeService_RequestExit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "super_node.proto",
}
